#include "constructors/constructors.hpp"
#include "operators/bitwise.hpp"
#include "operators/io_stream.hpp"
#include "operators/relational.hpp"

#include "third_party/catch.hpp"

TEST_CASE("BigInt or", "[bitwise][operators][or]") {
    BigInt num1 = 2346236236236;
    BigInt num2 = 132235230;
    num1 = num1 | num2;
    REQUIRE(num1 == 2346259316702);

    num1 = 12351235;
    num2 = -234723476234722367;
    num1 = num1 | num2;
    REQUIRE(num1 == -234723476232079421);

    num1 = -234623690123412506;
    num2 = 125124512032487;
    num1 = num1 | num2;
    REQUIRE(num1 == -234622587389345817);

    num1 = -1431251251251235;
    num2 = -27732465234;
    num1 = num1 | num2;
    REQUIRE(num1 == -26380746753);

    num1 = "1235891261982469012874";
    num2 = "1293467219083576123098";
    num1 = num1 | num2;
    REQUIRE(num1 == "1309682781461108670426");

    num1 = "1235213623623623652362387345835836";
    num2 = "-1265236246724723672362341";
    num1 = num1 | num2;
    REQUIRE(num1 == "-43838696476566461884481");

    num1 = "-2437243652345230589723908672390857239085672";
    num2 = "2390587631897697196719637813697193673";
    num1 = num1 | num2;
    REQUIRE(num1 == "-2437243298456356051172059702567077100437543");

    num1 = "-2635426355423365423563824336584233655423365563";
    num2 = "-2361233451123351123368554112363586983345235";
    num1 = num1 | num2;
    REQUIRE(num1 == "-789808689988857061850790520019663501668371");
}

TEST_CASE("BigInt and", "[bitwise][operators][and]") {
    BigInt num1 = 1251326523413261;
    BigInt num2 = 2352352362;
    num1 = num1 & num2;
    REQUIRE(num1 == 136577032);

    num1 = 136510932359;
    num2 = -23620978;
    num1 = num1 & num2;
    REQUIRE(num1 == 136508309638);

    num1 = -136510932359;
    num2 = 23620978;
    num1 = num1 & num2;
    REQUIRE(num1 == 20998256);

    num1 = -136510932359;
    num2 = -23620978;
    num1 = num1 & num2;
    REQUIRE(num1 == -136531930616);

    num1 = "1235891261982469012874";
    num2 = "1293467219083576123098";
    num1 = num1 & num2;
    REQUIRE(num1 == "1219675699604936465546");

    num1 = "1235213623623623652362387345835836";
    num2 = "-1265236246724723672362341";
    num1 = num1 & num2;
    REQUIRE(num1 == "1235213622402226102114230135357976");

    num1 = "-2437243652345230589723908672390857239085672";
    num2 = "2390587631897697196719637813697193673";
    num1 = num1 & num2;
    REQUIRE(num1 == "2036698757359145347749814033558545544");

    num1 = "-2635426355423365423563824336584233655423365563";
    num2 = "-2361233451123351123368554112363586983345235";
    num1 = num1 & num2;
    REQUIRE(num1 == "-2636997780184499917625342100176577578905042427");
}

TEST_CASE("BigInt exclusive or", "[bitwise][operators][xor]") {
    BigInt num1 = 243598027346;
    BigInt num2 = 3462306;
    num1 = num1 ^ num2;
    REQUIRE(num1 == 243599294192);

    num1 = 96391385749856;
    num2 = -35476874111;
    num1 = num1 ^ num2;
    REQUIRE(num1 == -96355927767583);

    num1 = -1633352178985461;
    num2 = 54986541;
    num1 = num1 ^ num2;
    REQUIRE(num1 == -1633352225189594);

    num1 = -723589474651;
    num2 = -23462387;
    num1 = num1 ^ num2;
    REQUIRE(num1 == 723570731176);

    num1 = "1235891261982469012874";
    num2 = "1293467219083576123098";
    num1 = num1 ^ num2;
    REQUIRE(num1 == "90007081856172204880");

    num1 = "1235213623623623652362387345835836";
    num2 = "-1265236246724723672362341";
    num1 = num1 ^ num2;
    REQUIRE(num1 == "-1235213622446064798590796597242457");

    num1 = "-2437243652345230589723908672390857239085672";
    num2 = "2390587631897697196719637813697193673";
    num1 = num1 ^ num2;
    REQUIRE(num1 == "-2437245335155113410317407452381110658983087");

    num1 = "-2635426355423365423563824336584233655423365563";
    num2 = "-2361233451123351123368554112363586983345235";
    num1 = num1 ^ num2;
    REQUIRE(num1 == "2636207971494511060563491309656557915403374056");
}

TEST_CASE("BigInt complement", "[bitwise][operators][complement]") {
    BigInt num1 = 1635;
    num1 = ~num1;
    REQUIRE(num1 == -1636);

    num1 = ~num1;
    REQUIRE(num1 == 1635);

    num1 = "125139857103985671093856190837256109285";
    num1 = ~num1;
    REQUIRE(num1 == "-125139857103985671093856190837256109286");

    num1 = "-2362362362362134513252462472462342137247234652352362";
    num1 = ~num1;
    REQUIRE(num1 == "2362362362362134513252462472462342137247234652352361");
}

TEST_CASE("BigInt right shift", "[bitwise][operators][right-shift]") {
    BigInt num1 = 321523234;
    BigInt num2 = 34632;
    num1 = num1 >> num2;
    REQUIRE(num1 == 1255950);

    num1 = "3262362359823657029376298365209385698760239650219837562130897561039"
            "285610892463245213523523423523528913652981736592810735606023560293"
            "12352819356012873561928735610732864098126019826578126340781562786";
    num2 = 100;
    num1 = num1 >> num2;
    REQUIRE(num1 == "2573550124329446319655292009535249356051118146250407195028"
                    "2723377880596024318283729565599355702729903855406763743948"
                    "6107740425372821654035859863013661491171141222178159");
}

TEST_CASE("BigInt left shift", "[bitwise][operators][left-shift]") {
    BigInt num1 = 321523234;
    BigInt num2 = 34632;
    num1 = num1 << num2;
    REQUIRE(num1 == 82309947904);

    num1 = "12235235623651234134634673473423425125";
    num2 = 1000;
    num1 = num1 << num2;
    REQUIRE(num1 == "1311016028169433470222349737098080916694305929266564942584"
                    "0616233101782056148402649639290331740004687896913161405615"
                    "7347411442494993962516386685474507189127787092464751383007"
                    "2105086777988858611736768450594260958607133346410000709272"
                    "5617636371226909196152245801473326406363165245423276359962"
                    "7150837216316410986005775823852235515832041472000");
}